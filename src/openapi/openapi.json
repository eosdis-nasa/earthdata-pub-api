{
  "openapi": "3.0.0",
  "info": {
    "description": "This is the API that serves as the central interaction point between the client and back-end services of Earthdata Pub.",
    "version": "1.0.0",
    "title": "EarthdataPub",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "brian.ellingson@uah.edu"
    }
  },
  "tags": [{
    "name": "data",
    "description": "Fetch questions, forms, workflows",
    "externalDocs": {
      "description": "Read the docs",
      "url": "http://database.docs/#TODO"
    }
  }, {
    "name": "notification",
    "description": "Interact with the notification system. Send a note, subscribe or unsubscribe to events.",
    "externalDocs": {
      "description": "Read the docs",
      "url": "http://database.docs/#TODO"
    }
  }, {
    "name": "model",
    "description": "Retrieve JSON schema models",
    "externalDocs": {
      "description": "Read the docs",
      "url": "http://database.docs/#TODO"
    }
  }, {
    "name": "action",
    "description": "Interact with the action system. Invoke an action, or register a custom action.",
    "externalDocs": {
      "description": "Read the docs",
      "url": "http://database.docs/#TODO"
    }
  }, {
    "name": "submission",
    "description": "Manage submissions, fill forms, review.",
    "externalDocs": {
      "description": "Read the docs",
      "url": "http://database.docs/#TODO"
    }
  }, {
    "name": "metrics",
    "description": "Retrieve system metrics or submit client side events to be logged.",
    "externalDocs": {
      "description": "Read the docs",
      "url": "http://database.docs/#TODO"
    }
  }, {
    "name": "version",
    "description": "Retrieve version of the API.",
    "externalDocs": {
      "description": "Read the docs",
      "url": "http://database.docs/#TODO"
    }
  }],
  "paths": {
    "/data/action/{id}": {
      "parameters": [{
        "name": "id",
        "in": "path",
        "description": "UUID of entity",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["data"],
        "summary": "Get action",
        "description": "Returns a single action by ID",
        "operationId": "actionFindById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/actions": {
      "get": {
        "tags": ["data"],
        "summary": "Get actions",
        "description": "Returns list of actions",
        "operationId": "actionFindAll",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/daac/{id}": {
      "parameters": [{
        "name": "id",
        "in": "path",
        "description": "UUID of entity",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["data"],
        "summary": "Get DAAC",
        "description": "Returns a single DAAC by ID",
        "operationId": "daacFindById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAAC"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/daacs": {
      "get": {
        "tags": ["data"],
        "summary": "Get DAACs",
        "description": "Returns list of DAACs",
        "operationId": "daacFindAll",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/form/{id}": {
      "parameters": [{
        "name": "id",
        "in": "path",
        "description": "UUID of entity",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["data"],
        "summary": "Get form",
        "description": "Returns a single form by ID",
        "operationId": "formFindById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Form"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/forms": {
      "get": {
        "tags": ["data"],
        "summary": "Get forms",
        "description": "Returns list of forms",
        "operationId": "formFindAll",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Form"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      },
      "post": {
        "tags": ["data"],
        "summary": "Create or update an form",
        "description": "Create a new form or update an existing form",
        "operationId": "formPut",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Form"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/group/{id}": {
      "parameters": [{
        "name": "id",
        "in": "path",
        "description": "UUID of entity",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["data"],
        "summary": "Get group",
        "description": "Returns a single group by ID",
        "operationId": "groupFindById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/groups": {
      "get": {
        "tags": ["data"],
        "summary": "Get groups",
        "description": "Returns list of groups",
        "operationId": "groupFindAll",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/role/{id}": {
      "parameters": [{
        "name": "id",
        "in": "path",
        "description": "UUID of entity",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["data"],
        "summary": "Get role",
        "description": "Returns a single role by ID",
        "operationId": "roleFindById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/roles": {
      "get": {
        "tags": ["data"],
        "summary": "Get roles",
        "description": "Returns list of roles",
        "operationId": "roleFindAll",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/note/{id}": {
      "parameters": [{
        "name": "id",
        "in": "path",
        "description": "UUID of entity",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["data"],
        "summary": "Get note",
        "description": "Returns a single note by ID",
        "operationId": "noteFindById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/notes": {
      "get": {
        "tags": ["data"],
        "summary": "Get notes",
        "description": "Returns list of notes",
        "operationId": "noteFindAll",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/question/{id}": {
      "parameters": [{
        "name": "id",
        "in": "path",
        "description": "UUID of entity",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["data"],
        "summary": "Get question",
        "description": "Returns a single question by ID",
        "operationId": "questionFindById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/questions": {
      "get": {
        "tags": ["data"],
        "summary": "Get questions",
        "description": "Returns list of questions",
        "operationId": "questionFindAll",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Question"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      },
      "post": {
        "tags": ["data"],
        "summary": "Create or update an question",
        "description": "Create a new question or update an existing question",
        "operationId": "questionPut",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Question"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/service/{id}": {
      "parameters": [{
        "name": "id",
        "in": "path",
        "description": "UUID of entity",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["data"],
        "summary": "Get service",
        "description": "Returns a single service by ID",
        "operationId": "serviceFindById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/services": {
      "get": {
        "tags": ["data"],
        "summary": "Get services",
        "description": "Returns list of services",
        "operationId": "serviceFindAll",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/submission/{id}": {
      "parameters": [{
        "name": "id",
        "in": "path",
        "description": "UUID of entity",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["data"],
        "summary": "Get submission",
        "description": "Returns a single submission by ID",
        "operationId": "submissionFindById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submission"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/submissions": {
      "get": {
        "tags": ["data"],
        "summary": "Get submissions",
        "description": "Returns list of submissions",
        "operationId": "submissionFindAll",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submission"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/user/{id}": {
      "parameters": [{
        "name": "id",
        "in": "path",
        "description": "UUID of entity",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["data"],
        "summary": "Get user",
        "description": "Returns a single user by ID",
        "operationId": "userFindById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/users": {
      "get": {
        "tags": ["data"],
        "summary": "Get users",
        "description": "Returns list of users",
        "operationId": "userFindAll",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/workflow/{id}": {
      "parameters": [{
        "name": "id",
        "in": "path",
        "description": "UUID of entity",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["data"],
        "summary": "Get workflow",
        "description": "Returns a single workflow by ID",
        "operationId": "workflowFindById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/data/workflows": {
      "get": {
        "tags": ["data"],
        "summary": "Get workflows",
        "description": "Returns list of workflows",
        "operationId": "workflowFindAll",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Sort field",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Workflow"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      },
      "post": {
        "tags": ["data"],
        "summary": "Create or update an workflow",
        "description": "Creates a new workflow or new version of existing workflow",
        "operationId": "workflowPut",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workflow"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${data_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/model/{model}": {
      "parameters": [{
        "name": "model",
        "in": "path",
        "description": "Name of JSON schema model to retrieve",
        "required": true,
        "schema":  { "$ref": "#/components/schemas/UUID" }
      }],
      "get": {
        "tags": ["model"],
        "summary": "Get model",
        "description": "Returns a single note by ID",
        "operationId": "getModel",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Bad request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${model_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/notification/notify": {
      "post": {
        "tags": ["notification"],
        "summary": "Send a notify request",
        "description": "Send a request to notify an individual or group.",
        "operationId": "notify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${notify_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/notification/subscribe": {
      "post": {
        "tags": ["notification"],
        "summary": "Subscribe or unscubscribe to an event",
        "description": "Subscribe or unsubscribe to events raised by given entities.",
        "operationId": "subscribe",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${subscribe_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/action/invoke": {
      "post": {
        "tags": ["action"],
        "summary": "Invoke an action.",
        "description": "Invoke an action to be processed on a given submission.",
        "operationId": "actionInvoke",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionInvokeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${invoke_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/action/register": {
      "post": {
        "tags": ["action"],
        "summary": "Register an action",
        "description": "Register a new custom action.",
        "operationId": "actionRegister",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionRegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${register_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/submission/{operation}": {
      "parameters": [{
        "name": "operation",
        "in": "path",
        "description": "Which submission operation to perform.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }],
      "post": {
        "tags": ["submission"],
        "summary": "Perform an operation for a Submission",
        "description": "Perform an operation for a Submission, i.e. initialize, save, submit, review.",
        "operationId": "submissionOperation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmissionOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${submission_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/metrics": {
      "get": {
        "tags": ["metrics"],
        "summary": "Fetches metrics",
        "description": "Operation to retrieve metrics for display on dashboard.",
        "operationId": "getLogEvents",
        "parameters": [{
          "name": "start",
          "in": "query",
          "description": "Start of the time range to view",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "end",
          "in": "query",
          "description": "End of the time range to view",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "eventType",
          "in": "query",
          "description": "Type of events to view, e.g. workflow_transitions, errors, logins",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "count",
          "in": "query",
          "description": "True will return a count of events of the given type within the time range, false will return the individual events and their associated data.",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${metrics_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      },
      "post": {
        "tags": ["metrics"],
        "summary": "Post a client-side event.",
        "description": "Sends a client-side event to the system to be logged. Typically this would be an error.",
        "operationId": "putLogEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogEventRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${metrics_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    },
    "/version": {
      "get": {
        "tags": ["version"],
        "summary": "Get version",
        "description": "Returns the current API version for compatibility checks.",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Version"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "${version_lambda_arn}",
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "type": "aws_proxy"
        },
        "x-router-controller": "proxy"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Authorizer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "x-amazon-apigateway-authtype": "cognito_user_pools",
        "x-amazon-apigateway-authorizer": {
          "type": "cognito_user_pools",
          "providerARNs": [ "${cognito_user_pool_arn}" ]
        }
      }
    },
    "schemas": {}
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
